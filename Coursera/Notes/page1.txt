Forms in html are used to collect user input. It allows website to collect essential info.
These are creatd by form tag.

--------------------------------------------------------------------------------------------------
JavaScript Basics
--------------------------------------------------------------------------------------------------
JavaScript is lightweight interpreted and single threaded language which is used to create dynamic content for web pages.

We can declare variables in 3 ways
var -> can be redeclared, reassigned , function scoped and can be hoisted and initialized with undefined in hoisting.
let -> can be reassigned but cannot be redeclared , Hoisted but in TDZ and cannnot be accessed before initialization
const -> is mostly used to declare constants cannot be reassigned and redeclared.and also hoisted in TDZ.

Data Types
Primitive : Numnber , String,Boolean ,Null, undefined , Symbol, Bigint
Non Primitive : Array,Object,function , date

Type Conversion
let s = "123";
let n = Number(s);  // Converts string to number
console.log(n);

Type Coercion 
Automatically Conversion of one data type to another. Also known as implicit type conversion.
Example : 
console.log(1 + "2");   // "12"   (number → string)
console.log("6" - 2);   // 4      (string → number)
console.log("6" * "2"); // 12     (both strings → numbers)

Type Conversion 
Conversion of one data type to another manually by user. Also known as explicit type conversion.

== vs ===
== ->  compares only the data not their types (kind of its loose equality check)
=== -> compares data types also and no Coercion happens (strict equality check)

Hoisting
Automatically declarations are moved to top of scope.
var -> hoisted and initialized with undefined
let / const -> hoisted but uninitialized
Function declarations -> fully hoisted with body

Objects in JavaScript
A collection of key value pairs. Keys are called properties.

Arrays in JavaScript
Arrays in JavaScript are ordered list of values. They ae used to store multiple values into a single variable.
In js arrays are heterogeneous.We can store multiple values of different data types in an array.
Creation of array can be done using two ways 
 -> using array literals []  let a = [01,112,22,"ssgs",null,NaN,undefined]
 -> using new keyword (Constructor) = let a  = new Array(1,21,221)

Methods used in array
-> arr.length()  - returns length of an array
-> arr.push()    - adds an element to last of array
-> arr.unshift() - adds an element to front of an array
-> arr.pop()     - remove an element from end of array
-> arr.shift()   - removes an element from begining of an Array
-> arr.indexOf("ele") - return the index of that element in array otherwise -1
-> arr.includes(ele) - to check whether an element is present in an array (return true or false)
-> arr.lastIndexOf(ele) - return the last  occernce index of an element basically search from right to left
-> arr.concat(arr2) - concatenates or joins two different arrays (it returns a new joined array)
-> arr.toString() - convert array to string
-> arr.forEach((ele)=> console.log(ele)) -> use to print array 
-> arr.sort() -> used to sort the array
-> arr.reverse() -> To reverse an array
-> map -> is a built in array method used to create a new array by appling  some function to each and every element of an array.
-> filter -> method used to filter the content of an array based on certain condition
-> reduce -> method used to reduce the elements of array into single value on the basis of given condition. (contains accumulator,currval,initialvalue) It is mostly used to perform the aggeregate operations like sum mmin max  
-> arr.slice(stindex,endindex) -> used to select a particulaar portion of an array .its return type is array
-> arr.splice(startIndex , no. of elements to be deleted ,{adding elements 1,ele2 ...}) - > used to add remove and replace elements in array from any position.
Splice returns an array of removed items or elements.
-> find() -> used to find the first value on the basis of callback functions

Functions in JavaScript
Functions are reusable blocks of code which are designed to perform a specific tasks.
-> Named Functions -> simple javascript function with function keyword and having some name. Can be Hoisted
-> Function Expressions -> functions declared and assigned to a variable. Cannot be hoisted 
-> Arrow Functions -> concise syntax to write functions in js. 
-> Anonymous functions -> functions without any name.

Higher Order functions
Functions which takes another functions as argument like a callback or return a function as a result.

Callback Function
Functions that are passed as an argument to another functions.

IIFE -> Immediately Invoked Functions Expressionsw
special functions which are used when we need to invoke a function immediatly after definition.
It is used to get rid of a global scope pollution problem which happens with variables using var.


Strings in JavaScript
Strings are sequence of characters.
can be created using "" '' and `backticks`. also we can create using string constructor.
Strings are immutable. Means every change to string like concat replace and all will lead to creation of new string.

Objects in JavaScript
Objects in javascript are collection of key value pairs or we can say it as collection of properties.
Created using 
-> object literals {} 
-> Object Constructor (const myobj = new Object();).
-> using class 

We can access the objects value using obj.key but mostly we use obj[key].
We mostly use for in loop to iterate over properties of objects. 
Important methods to be used on Objects
 -> Object.assign(obj1,obj2) -> used to copy objects to a single object {Mostly spread operator is use ...assign is not used much.}
 -> Object.keys(objname) -> returns an array of all properties or keys
 -> Object.values(objname) -> returns an array of all values
 -> Object.entries(objname) -> returns an array of all key and val pairs
 -> Object.freeze(objname) -> prevents modifying deleting and adding new properties
 -> Object.seal(objname) -> prevents adding or deleting but helps in updating existed ones
 -> objname.hasOwnProperty(prop) -> return true if key exxists 
 -> 

this ->  this is special keyword that refers to current executing context or we can say the object which is under execution 
it basically refers to current object in use.
when we log this in browser console then it gives window..but if we execute using node then it gives empty {} object or context.

Execution of js
When we give our javascript file the firstly a Global Ec is created and it is refered as this.
It runs in two phases 
-> memory creation phases (Creation phase) -> space is allocated for all var and all
-> Execution phase 

DOM -> Document object model
Dom is document object model it is programming interface provided by browser which basically represents the stucture of html as tree of objects.
Browser takes the HTML and creates a tree like stucture.
Every element attribute tags and even the text written in html doc becomes the node of this tree.
DOM allows javascript to interact and manipulate the page dynamically.
Our webpage is a tree and document is root.

-> const d = document.getElementById('id') 
-> d.innerText -> returns only the visible text it ignores the hidden text styled with css
-> d.innerHTMLc -> returns the visible and hidden text both basically it gives the text exactly as it appears in DOM.
-> d.textContent -> return the complete html if written inside incuding tag and all

-> document.getElementById() -> returns single element used to fetch element by its id 
-> document.getElementByClassName() ->  returns html collection of all (array like but not array)
-> document.getElementByTagName() -> returns html collection of all elements with that tag
-> document.getElementByName() -> returns nodelist of all elements with the given name attribute.
-> document.querySelector() -> it takes a valid css selector string as its argument and returns the first element in the DOM that matches it.
In QuerySelector we can pass 
* tagname
* className (with .)
* id (with #)
* Attribute ([type = 'text'])
* combination of selectors (div.container , ul > li)
-> document.querySelectorAll(li:first-child)  

Events in JavaScript
Events in javascript are actions or occurences that happen in browser.THese can be triggered by user interactions or by browser itself.

EventListeners in JavaScript
EventListener is a function in javascript that waits for a specific event to happen on an element and then execute the code in response.
Mostly done using addEventListener(event,callback) method 

Event Propagation in js
Its a way in which events travel among the DOM when an event happens on the element.
It has two phases 
-> Capturing Phase -> Travelling of event from root to target element.
-> Bubbling Phase -> Travelling of event from target to root element.


--------------------------------------------------------------------------------------------------